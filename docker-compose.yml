version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: voice_rag_backend
    ports:
      - "8000:8000"
    volumes:
      # Persistent data storage
      - voice_rag_vector_data:/data/vector_store
      - voice_rag_uploads:/data/uploads
      - voice_rag_logs:/app/logs
      - voice_rag_temp_audio:/app/temp_audio
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - ENVIRONMENT=development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - voice-rag-network
    depends_on:
      - redis

  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: voice_rag_frontend
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://backend:8000
      - STREAMLIT_SERVER_HEADLESS=true
      - STREAMLIT_SERVER_ENABLE_CORS=false
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - voice-rag-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: voice_rag_redis
    ports:
      - "6379:6379"
    volumes:
      - voice_rag_redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    networks:
      - voice-rag-network

  # PostgreSQL for metadata and user management (optional)
  postgres:
    image: postgres:15-alpine
    container_name: voice_rag_postgres
    environment:
      POSTGRES_DB: voice_rag
      POSTGRES_USER: voice_rag_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
    volumes:
      - voice_rag_postgres_data:/var/lib/postgresql/data
      - ./docker/init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U voice_rag_user"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - voice-rag-network
    profiles:
      - with-db

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: voice_rag_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - voice_rag_nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - voice-rag-network
    profiles:
      - production

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: voice_rag_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - voice_rag_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - voice-rag-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: voice_rag_grafana
    ports:
      - "3000:3000"
    volumes:
      - voice_rag_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - voice-rag-network
    profiles:
      - monitoring

  # ElasticSearch for logging (optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: voice_rag_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - voice_rag_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - voice-rag-network
    profiles:
      - logging

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: voice_rag_kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - voice-rag-network
    profiles:
      - logging

  # Backup service
  backup:
    image: alpine:latest
    container_name: voice_rag_backup
    volumes:
      - voice_rag_vector_data:/backup/vector_store:ro
      - voice_rag_uploads:/backup/uploads:ro
      - voice_rag_postgres_data:/backup/postgres:ro
      - ./backups:/backup/output
    command: >
      sh -c "
        echo 'Setting up backup cron job...'
        echo '0 2 * * * /backup/backup.sh' | crontab -
        crond -f
      "
    restart: unless-stopped
    networks:
      - voice-rag-network
    profiles:
      - backup

networks:
  voice-rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  voice_rag_vector_data:
    driver: local
  voice_rag_uploads:
    driver: local
  voice_rag_logs:
    driver: local
  voice_rag_temp_audio:
    driver: local
  voice_rag_redis_data:
    driver: local
  voice_rag_postgres_data:
    driver: local
  voice_rag_nginx_logs:
    driver: local
  voice_rag_prometheus_data:
    driver: local
  voice_rag_grafana_data:
    driver: local
  voice_rag_elasticsearch_data:
    driver: local